{"version":3,"sources":["components/Container.js","components/Card.js","components/score.js","components/message.js","components/cardsContainer.js","App.js","index.js"],"names":["Container","props","className","fluid","children","Card","src","source","onClick","handleClick","id","alt","style","height","width","Score","currentScore","topScore","Message","message","scores","CardsContainer","topScoreCounter","goodGuess","dontMessWithState","state","cards","map","card","newCard","clicked","newScore","Math","max","console","log","setState","shuffleCards","push","newGame","array","i","length","j","floor","random","temp","this","key","Component","App","ReactDOM","render","document","getElementById"],"mappings":"qLAMeA,MAJf,SAAmBC,GACf,OAAO,yBAAKC,UAAS,mBAAcD,EAAME,MAAQ,SAAW,KAAOF,EAAMG,WCU9DC,MAXf,SAAcJ,GACZ,OACE,yBACEK,IAAKL,EAAMM,OACXC,QAAS,kBAAMP,EAAMQ,YAAYR,EAAMS,KACvCC,IAAKV,EAAMS,GACXE,MAAO,CAAEC,OAAQ,QAASC,MAAO,YCGxBC,MATf,SAAed,GACb,OACE,oCACE,8CAAoBA,EAAMe,cAC1B,0CAAgBf,EAAMgB,SAAtB,OCASC,MAJf,SAAiBjB,GACf,OAAO,4BAAKA,EAAMkB,U,OCKhBC,EAAS,CAAC,GAuHCC,E,YAnHb,WAAYpB,GAAQ,IAAD,8BACjB,4CAAMA,KAoBRQ,YAAc,SAAAC,GACZ,IAAIY,EAIAC,GAAY,EACZC,EAAoB,EAAKC,MAAMC,MAAMC,KAAI,SAAAC,GAC3C,IAAIC,EAAUD,EAUd,OATIC,EAAQnB,KAAOA,GACO,IAApBmB,EAAQC,UACVD,EAAQC,QAAU,EAClBP,GAAY,GAMTM,KAGT,GAAIN,EAAW,CAEb,IAAMQ,EAAW,EAAKN,MAAMV,MAAMC,aAAe,EACjDM,EAAkBU,KAAKC,IAAL,MAAAD,KAAYZ,GAC9Bc,QAAQC,IAAIb,GACZ,EAAKc,SAAS,CACZV,MAAO,EAAKW,aAAab,GACzBT,MAAO,CAAEC,aAAce,EAAUd,SAAUK,GAC3CJ,QAAS,CAAEC,QAAS,uCAGjB,CAGLC,EAAOkB,KAAK,EAAKb,MAAMV,MAAMC,cAE7BM,EAAkBU,KAAKC,IAAL,MAAAD,KAAYZ,GAC9Bc,QAAQC,IAAIH,KAAKC,IAAIb,IAErB,IAAImB,EAAU,EAAKd,MAAMC,MAAMC,KAAI,SAAAC,GACjC,IAAIC,EAAUD,EAEd,OADAC,EAAQC,QAAU,EACXD,KAOTK,QAAQC,IAAIb,GACZ,EAAKc,SAAS,CACZV,MAAO,EAAKW,aAAaE,GACzBxB,MAAO,CAAEC,aAAc,EAAGC,SAAUK,GACpCJ,QAAS,CAAEC,QAAS,gBA1EP,EAiFnBkB,aAAe,SAAAG,GACb,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CACrC,IAAME,EAAIX,KAAKY,MAAMZ,KAAKa,SAAWL,EAAME,QACrCI,EAAON,EAAMC,GACnBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKG,EAEb,OAAON,GAtFP,EAAKf,MAAQ,CACXC,QACAX,MAAO,CAAEC,aAAc,EAAGC,SAAU,GACpCC,QAAS,CAAEC,QAAS,6BALL,E,sEA2FT,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEH,aAAc+B,KAAKtB,MAAMV,MAAMC,aAC/BC,SAAU8B,KAAKtB,MAAMV,MAAME,WAE7B,kBAAC,EAAD,CAASE,QAAS4B,KAAKtB,MAAMP,QAAQC,UAEpC4B,KAAKtB,MAAMC,MAAMC,KAAI,SAAAC,GAAI,OAGxB,kBAAC,EAAD,CACElB,GAAIkB,EAAKlB,GACTH,OAAQqB,EAAKrB,OACbE,YAAa,EAAKA,YAClBuC,IAAKpB,EAAKlB,a,GA5GOuC,aCJdC,MAJf,WACE,OAAO,kBAAC,EAAD,OCATC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.fa4816f7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Container(props) {\r\n    return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>{props.children}</div>;\r\n}\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <img\r\n      src={props.source}\r\n      onClick={() => props.handleClick(props.id)}\r\n      alt={props.id}\r\n      style={{ height: \"100px\", width: \"100px\" }}\r\n    ></img>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\n\r\nfunction Score(props) {\r\n  return (\r\n    <>\r\n      <h3>Current Score: {props.currentScore}</h3>\r\n      <h3>Top Score: {props.topScore} </h3>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Score;\r\n","import React from \"react\";\r\n\r\nfunction Message(props) {\r\n  return <h4>{props.message}</h4>;\r\n}\r\n\r\nexport default Message;\r\n","import React, { Component } from \"react\";\r\nimport Container from \"./Container\";\r\nimport Row from \"./Row\";\r\nimport Col from \"./Col\";\r\nimport Card from \"./Card\";\r\nimport Score from \"./score\";\r\nimport Message from \"./message\";\r\nimport cards from \"../cards.json\";\r\nlet scores = [0];\r\n\r\n//console.log(cards);\r\nclass CardsContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cards,\r\n      Score: { currentScore: 0, topScore: 0 },\r\n      Message: { message: \"Please click on an image\" }\r\n    };\r\n    //console.log(this.state.cards);\r\n  }\r\n\r\n  //componentDidMount()\r\n  // render() {\r\n\r\n  //method that will shuffle cards when one card is clicked\r\n  //change clicked value from 0 to 1\r\n  //if 1 then player loses\r\n  //if 0 then score ++\r\n  //cards.clicked will change\r\n  //assign data value to each card = card id\r\n  //generate a random id for each image\r\n\r\n  handleClick = id => {\r\n    let topScoreCounter;\r\n\r\n    //console.log(id)\r\n    //has it been clicked\r\n    let goodGuess = false;\r\n    let dontMessWithState = this.state.cards.map(card => {\r\n      let newCard = card;\r\n      if (newCard.id === id) {\r\n        if (newCard.clicked === 0) {\r\n          newCard.clicked = 1;\r\n          goodGuess = true;\r\n        }\r\n      }\r\n      //console.log(newCard)\r\n      //console.log(cards)\r\n\r\n      return newCard;\r\n    });\r\n\r\n    if (goodGuess) {\r\n      //console.log(scores);\r\n      const newScore = this.state.Score.currentScore + 1;\r\n      topScoreCounter = Math.max(...scores);\r\n      console.log(topScoreCounter);\r\n      this.setState({\r\n        cards: this.shuffleCards(dontMessWithState),\r\n        Score: { currentScore: newScore, topScore: topScoreCounter },\r\n        Message: { message: \"Please click on another image\" }\r\n      });\r\n      // they got it right-set state\r\n    } else {\r\n      //console.log(scores);\r\n\r\n      scores.push(this.state.Score.currentScore);\r\n\r\n      topScoreCounter = Math.max(...scores);\r\n      console.log(Math.max(scores));\r\n\r\n      let newGame = this.state.cards.map(card => {\r\n        let newCard = card;\r\n        newCard.clicked = 0;\r\n        return newCard;\r\n      });\r\n\r\n      //they got it wrong- deal with that\r\n      //reset all clicked properties to 0 from dontMessWithState\r\n      //handle score\r\n      //console.log(scores);\r\n      console.log(topScoreCounter);\r\n      this.setState({\r\n        cards: this.shuffleCards(newGame),\r\n        Score: { currentScore: 0, topScore: topScoreCounter },\r\n        Message: { message: \"You lost\" }\r\n      });\r\n      //console.log(this.state.cards);\r\n    }\r\n\r\n    //if/else\r\n  };\r\n  shuffleCards = array => {\r\n    for (let i = 0; i < array.length; i++) {\r\n      const j = Math.floor(Math.random() * array.length);\r\n      const temp = array[i];\r\n      array[i] = array[j];\r\n      array[j] = temp;\r\n    }\r\n    return array;\r\n  };\r\n  // onClick={this.state.shuffleCards()\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Score\r\n          currentScore={this.state.Score.currentScore}\r\n          topScore={this.state.Score.topScore}\r\n        ></Score>\r\n        <Message message={this.state.Message.message}></Message>\r\n\r\n        {this.state.cards.map(card => (\r\n          //call shuffleCards method in the onClick event\r\n\r\n          <Card\r\n            id={card.id}\r\n            source={card.source}\r\n            handleClick={this.handleClick}\r\n            key={card.id}\r\n          />\r\n        ))}\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CardsContainer;\r\n","import React from \"react\";\nimport CardsContainer from \"./components/cardsContainer\";\n\nfunction App() {\n  return <CardsContainer />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}